package service;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.util.UUID;

import javax.websocket.DeploymentException;
import javax.websocket.Session;

import org.pmw.tinylog.Logger;

public class Main {

	public static void main(String[] args) throws IOException {
		AsynchronousServerSocketChannel server = AsynchronousServerSocketChannel.open();
		server.bind(new InetSocketAddress("localhost", 23));
		server.accept(server, new CompletionHandler<AsynchronousSocketChannel, AsynchronousServerSocketChannel>() {

			@Override
			public void completed(AsynchronousSocketChannel client, AsynchronousServerSocketChannel server) {
				Logger.info("successfully accepted a client connection");
				try {
					ConnectRemoteServer(client, server);
				} catch (DeploymentException e) {

				} catch (IOException e) {

				}
			}

			@Override
			public void failed(Throwable exc, AsynchronousServerSocketChannel attachment) {
				Logger.error("failed to accept a client connection");
			}

		});

		System.in.read();
	}

	private static void StartRead(AsynchronousSocketChannel socket) {
		ByteBuffer buffer = ByteBuffer.allocate(2048);
		if (socket.isOpen()) {
			socket.read(buffer, socket, new CompletionHandler<Integer, AsynchronousSocketChannel>() {

				@Override
				public void completed(Integer size, AsynchronousSocketChannel attachment) {
					if (size != -1) {

						socket.write(buffer.get(buffer.array(), 0, size));
					}

					StartRead(attachment);
				}

				@Override
				public void failed(Throwable exc, AsynchronousSocketChannel attachment) {
				}

			});
		} else {
		}
	}

}
