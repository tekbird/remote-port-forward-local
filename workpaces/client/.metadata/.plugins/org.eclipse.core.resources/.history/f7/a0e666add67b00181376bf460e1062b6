package client;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;

import javax.websocket.ContainerProvider;
import javax.websocket.DeploymentException;
import javax.websocket.WebSocketContainer;

import org.pmw.tinylog.Logger;

public class PortAccessService {

	public PortAccessService() {
	}

	public void start(Integer localPort, URI remoteUri) throws DeploymentException, IOException {
		InetSocketAddress sockAddr = new InetSocketAddress("localhost", localPort);
		AsynchronousServerSocketChannel serverSock = AsynchronousServerSocketChannel.open().bind(sockAddr);
		serverSock.accept(serverSock,
				new CompletionHandler<AsynchronousSocketChannel, AsynchronousServerSocketChannel>() {

					@Override
					public void completed(AsynchronousSocketChannel sockChannel,
							AsynchronousServerSocketChannel serverSock) {

						serverSock.accept(serverSock, this); // for more connections

						try {

							WebSocketContainer container = ContainerProvider.getWebSocketContainer();
							WebSocketEndpoint endpoint = new WebSocketEndpoint();
							container.connectToServer(endpoint, remoteUri);
						} catch (DeploymentException | IOException e) {
							Logger.error("failed to connect to remote server: {}", e.getMessage());
						}
					}

					@Override
					public void failed(Throwable exc, AsynchronousServerSocketChannel serverSock) {
						Logger.error("failed to accept a connection: {}", exc.getMessage());
					}

				});
	}
}
