package client;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;

import javax.websocket.ContainerProvider;
import javax.websocket.DeploymentException;
import javax.websocket.WebSocketContainer;

import org.pmw.tinylog.Logger;

public class PortAccessService {

	public PortAccessService() {
	}

	public void start(Integer localPort, URI remoteUri) throws DeploymentException, IOException {
		startRemotePort(remoteUri);
		startLocalPort(localPort);
	}

	private void startRemotePort(URI remoteUri) throws DeploymentException, IOException {
		WebSocketContainer container = ContainerProvider.getWebSocketContainer();
		WebSocketEndpoint endpoint = new WebSocketEndpoint();

		container.connectToServer(endpoint, remoteUri);
	}

	private void startLocalPort(Integer localPort) throws IOException {
		InetSocketAddress sockAddr = new InetSocketAddress("localhost", localPort);
		AsynchronousServerSocketChannel serverSock = AsynchronousServerSocketChannel.open().bind(sockAddr);
		serverSock.accept(serverSock,
				new CompletionHandler<AsynchronousSocketChannel, AsynchronousServerSocketChannel>() {

					@Override
					public void completed(AsynchronousSocketChannel sockChannel,
							AsynchronousServerSocketChannel serverSock) {
						serverSock.accept(serverSock, this);
						startRead(sockChannel);

					}

					private void startRead(AsynchronousSocketChannel sockChannel) {
						ByteBuffer buf = ByteBuffer.allocate(2048);
						sockChannel.read(buf, sockChannel, new CompletionHandler<Integer, AsynchronousSocketChannel>() {

							@Override
							public void completed(Integer length, AsynchronousSocketChannel channel) {
								if (length != 1) {
									buf.flip();
								}
								buf.flip();

								// echo the message
								// startWrite( channel, buf );

								// start to read next message again
								startRead(channel);
							}

							@Override
							public void failed(Throwable exc, AsynchronousSocketChannel channel) {
								Logger.error("failed to read: {}", exc.getMessage());
							}
						});
					}

					@Override
					public void failed(Throwable exc, AsynchronousServerSocketChannel serverSock) {
						Logger.error("failed to accept a connection: {}", exc.getMessage());
					}

				});
	}

}
