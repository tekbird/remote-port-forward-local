package client;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.util.concurrent.Callable;
import java.util.function.Consumer;
import java.util.function.Supplier;

import javax.websocket.*;

import org.pmw.tinylog.Logger;

@ClientEndpoint
public class WebSocketEndpoint extends Endpoint {

	private AsynchronousSocketChannel serverSock;
	private ByteBuffer buffer = ByteBuffer.allocate(2048);

	public WebSocketEndpoint(AsynchronousSocketChannel sockChannel) {
		this.serverSock = sockChannel;
	}

	@Override
	public void onOpen(Session session, EndpointConfig config) {
		Logger.info("onOpen: {}", session.getId());
		startRead(session);

	}

	private void startRead(Session session) {
		
		this.serverSock.read(buffer, null, new CompletionHandler<Integer, Void>() {

			@Override
			public void completed(Integer length, Void v) {
				if(length != -1) {
					buffer.flip();
					try {
						session.getBasicRemote().sendBinary(buffer);
					} catch (IOException e) {
						Logger.error("failed to send to websocket: {}", e.getMessage());
					}
				}
				if(serverSock.isOpen()) {
					startRead(session);
				}
			}

			@Override
			public void failed(Throwable exc, Void v) {

			}

		});
	}

	@OnMessage
	public void onMessage(byte[] bytes, Session session) {

	}

	@OnClose
	public void onClose(Session session, CloseReason reason) {

	}
}
