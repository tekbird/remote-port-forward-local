package client;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.util.concurrent.Callable;
import java.util.function.Consumer;
import java.util.function.Supplier;

import javax.websocket.*;
import javax.websocket.MessageHandler.Partial;
import javax.websocket.MessageHandler.Whole;

import org.pmw.tinylog.Logger;

@ClientEndpoint
public class WebSocketEndpoint extends Endpoint {

	private AsynchronousSocketChannel serverSock;
	private ByteBuffer buffer = ByteBuffer.allocate(4096);

	public WebSocketEndpoint(AsynchronousSocketChannel sockChannel) {
		this.serverSock = sockChannel;
	}

	@Override
	public void onOpen(Session session, EndpointConfig config) {
		Logger.info("onOpen: {}", session.getId());
		Partial<ByteBuffer> onMessageHandler = new WebSocketMessageHandler(serverSock);
		session.addMessageHandler(ByteBuffer.class, onMessageHandler);
		startRead(session);
	}

	private void startRead(Session session) {

		this.serverSock.read(buffer, null, new CompletionHandler<Integer, Void>() {

			@Override
			public void completed(Integer length, Void v) {
				if (length > 0) {
					buffer.flip();
					try {
						session.getBasicRemote().sendBinary(buffer);
						Logger.info("sent {} bytes to remote server", length);
					} catch (IOException e) {
						Logger.error("failed to send to websocket: {}", e.getMessage());
					}
				}
				if (serverSock.isOpen()) {
					Thread.currentThread().sleep(10);
					startRead(session);
				}
			}

			@Override
			public void failed(Throwable exc, Void v) {
				Logger.error("failed to read: {}", exc.getMessage());
			}

		});
	}

	@Override
	public void onClose(Session session, CloseReason reason) {
		Logger.info("onClose: {}", session.getId());
		if (serverSock.isOpen()) {
			try {
				serverSock.close();
			} catch (IOException e) {
				Logger.error("failed to close socket: {}", e.getMessage());
				e.printStackTrace();
			}
		}
	}
}
