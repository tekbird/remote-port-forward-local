package net.portforward.server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.util.UUID;
import javax.websocket.Session;
import org.pmw.tinylog.Logger;

public class Proxy {

	private WebsocketProxy wsProxy;
	private static String HOST = "localhost";

	public Proxy(WebsocketProxy wsProxy) {
		this.wsProxy = wsProxy;
		Logger.info("new proxy instance created for session id {} on port {}", this.wsProxy.getSessionId(),
				this.wsProxy.getPort());
	}

	public void Start() throws IOException {
		AsynchronousSocketChannel sockChannel = AsynchronousSocketChannel.open();
		sockChannel.connect(new InetSocketAddress(HOST, wsProxy.getPort()), sockChannel,
				new CompletionHandler<Void, AsynchronousSocketChannel>() {

					@Override
					public void completed(Void result, AsynchronousSocketChannel channel) {
						Logger.info("successfully connected to {} on port {}", HOST, wsProxy.getPort());
						wsProxy.setSocket(channel);
						StartRead(channel);
					}

					@Override
					public void failed(Throwable exc, AsynchronousSocketChannel attachment) {
						Logger.error("failed to connect to {} on port {}: {}", HOST, wsProxy.getPort(),
								exc.getMessage());
					}
				});
		Logger.info("proxy started for session id {}", this.wsProxy.getSessionId());
	}

	protected void StartRead(AsynchronousSocketChannel socket) {
		ByteBuffer buffer = ByteBuffer.allocate(2048);
		if (socket.isOpen()) {
			socket.read(buffer, socket, new CompletionHandler<Integer, AsynchronousSocketChannel>() {

				@Override
				public void completed(Integer size, AsynchronousSocketChannel attachment) {
					if (size != -1) {
						buffer.flip();
						Logger.info("read {} bytes for session id {}", size, wsProxy.getSessionId());
						try {
							wsProxy.sendData(buffer);
							Logger.info("sent {} bytes to session id {}", size, wsProxy.getSessionId());
						} catch (IOException e) {
							Logger.error("failed to send data to websocket session: {}", e.getMessage());
						}
					}

					StartRead(attachment);
				}

				@Override
				public void failed(Throwable exc, AsynchronousSocketChannel attachment) {
					Logger.error("failed to read in session id {}: {}", wsProxy.getSessionId(), exc.getMessage());
				}

			});
		} else {
			Logger.error("read stopped, connection is closed for session id {}", wsProxy.getSessionId());
		}
	}
}
