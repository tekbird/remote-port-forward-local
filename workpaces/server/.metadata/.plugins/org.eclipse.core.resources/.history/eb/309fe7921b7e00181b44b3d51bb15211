package net.portforward.server;

import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousSocketChannel;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import javax.websocket.MessageHandler.Whole;

import org.pmw.tinylog.Logger;

public class IncomingMessageHandler implements Whole<ByteBuffer> {

	private AsynchronousSocketChannel sockChannel;
	private LinkedList<ByteBuffer> incomingBuffer = new LinkedList<ByteBuffer>();
	private Object locker = new Object();

	public IncomingMessageHandler() {
	}
	
	public void setLocalSocket(AsynchronousSocketChannel serviceSocket) {
		LinkedList<ByteBuffer> tempBuffer = null; 
		synchronized (locker) {
			this.sockChannel = serviceSocket;
			tempBuffer = this.incomingBuffer;
			this.incomingBuffer = null;
		}
		
	}

	@Override
	public void onMessage(ByteBuffer message) {
		Logger.info("recieved {} bytes from websocket", message.limit());
		AsynchronousSocketChannel socketChannel = null;
		synchronized (locker) {
			socketChannel = this.sockChannel;
			if (socketChannel == null) {
				incomingBuffer.add(message);
				Logger.info("messaged added to queue while waiting for local socket");
			}
		}
		if (socketChannel == null) {
			return;
		} else {
			Future<Integer> writeTask = this.sockChannel.write(message);
			try {
				writeTask.get();
			} catch (InterruptedException | ExecutionException e) {
				Logger.error("failed to write data to socket with error {}", e.getMessage());
			}
		}
	}

}
