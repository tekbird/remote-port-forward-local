package net.portforward.server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.AsynchronousSocketChannel;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.PathParam;
import javax.websocket.server.ServerEndpoint;
import org.pmw.tinylog.Logger;

@ServerEndpoint(value = "/ep/{port}")
public class EndPoint {

	@OnOpen
	public void onOpen(Session session, @PathParam("port") int port) throws IOException {
		Logger.info("onOpen: {}", session.getId());

		AsynchronousSocketChannel sockChannel = AsynchronousSocketChannel.open();
		InetSocketAddress address = new InetSocketAddress("localhost", port);
		sockChannel.connect(address, sockChannel,
				new CompletionHandler<Void, AsynchronousSocketChannel>() {
					@Override
					public void completed(Void result, AsynchronousSocketChannel channel) {

						startRead(channel);
						Thread writerThread = new Thread(new Runnable() {

							@Override
							public void run() {

								startWrite(channel);
							}

						});
						writerThread.setName("writer-thread");
						writerThread.start();
					}

					@Override
					public void failed(Throwable exc, AsynchronousSocketChannel channel) {
						Logger.info("failed to connect to server: {}", exc.getMessage());
					}

				});

	}

	@OnMessage
	public void onMessage(Session session, byte[] bytes) throws IOException {
		Logger.info("onMessage: {}", session.getId());
	}

	@OnClose
	public void onClose(Session session) throws IOException {
		Logger.info("onClose: {}", session.getId());
	}

	@OnError
	public void onError(Session session, Throwable throwable) {
		Logger.info("onError: {}", session.getId());
	}
}
