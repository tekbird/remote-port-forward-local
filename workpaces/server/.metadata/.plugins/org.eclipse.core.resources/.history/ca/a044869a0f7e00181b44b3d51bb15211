package net.portforward.server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.PathParam;
import javax.websocket.server.ServerEndpoint;
import org.pmw.tinylog.Logger;

@ServerEndpoint(value = "/ep/{port}")
public class EndPoint {

	@OnOpen
	public void onOpen(Session session, @PathParam("port") int port) throws IOException {
		Logger.info("onOpen: {}", session.getId());

		AsynchronousSocketChannel sockChannel = AsynchronousSocketChannel.open();
		InetSocketAddress address = new InetSocketAddress("localhost", port);
		sockChannel.connect(address, sockChannel, new CompletionHandler<Void, AsynchronousSocketChannel>() {
			@Override
			public void completed(Void result, AsynchronousSocketChannel socketChannel) {

				session.addMessageHandler(ByteBuffer.class, new IncomingMessageHandler(socketChannel));
				startRead(session, socketChannel);
			}

			private void startRead(Session session, AsynchronousSocketChannel sockChannel) {
				final ByteBuffer buffer = ByteBuffer.allocate(4096);

				sockChannel.read(buffer, null, new CompletionHandler<Integer, Void>() {

					@Override
					public void completed(Integer length, Void v) {
						if(length == -1) {
							Logger.warn("connection is being closed");
							session.close();
						}
						if (length > 0) {
							buffer.flip();
							try {
								session.getBasicRemote().sendBinary(buffer);
							} catch (IOException e) {
								Logger.error("failed to send to websocket with error {}", e.getMessage());
							}
						}
						if (sockChannel.isOpen()) {
							startRead(session, sockChannel);
						}
					}

					@Override
					public void failed(Throwable exc, Void v) {
						Logger.error("failed to read message from socket with error {}", exc.getMessage());
					}

				});
			}

			@Override
			public void failed(Throwable exc, AsynchronousSocketChannel channel) {
				Logger.info("failed to connect to socket with error {}", exc.getMessage());
			}

		});

	}

	@OnClose
	public void onClose(Session session) throws IOException {

	}

	@OnError
	public void onError(Session session, Throwable throwable) {
	}
}
